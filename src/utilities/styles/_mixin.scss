@use 'sass:map';

@mixin objectSize($size, $paddingX, $fontSize, $lineHeight, $height, $minWidth) {
  &.size-#{$size} {
    padding-left: $paddingX;
    padding-right: $paddingX;
    font-size: $fontSize;
    line-height: $lineHeight;
    height: $height;
    min-width: $minWidth;
  }
}

@mixin objectBoxShadow($size) {
  &.shadow-#{$size} {
    box-shadow: map.get($shadow, $size);
  }
}

@mixin objectColor($colorName) {
  &.color-#{$colorName} {
    color: map.get($color, $colorName);
  }
}

@mixin objectBackgroundColor($colorName) {
  $bgColor: map.get($color, $colorName);
  
  &.background-color-#{$colorName} {
    background-color: $bgColor;
    border: 0px solid darken($bgColor, 15%);
    color: lighten($bgColor, 80%);
    
    @if $colorName == 'clean'{
      color: darken($bgColor, 80%);
    }

    &:hover {
      background-color: darken($bgColor, 10%);
    }
  }
}

@mixin createTextColor($colorName) {
  $bgColor: map.get($color, $colorName);
  color: $color;
}

@mixin createBackgroundColor($type) {
  $bgColor: map.get($variantBackgroundColor, $type);
  background-color: $bgColor;
}

@mixin createBorderColor($type) {
  $bgColor: map.get($variantBackgroundColor, $type);
  @if $type == 'outline' {
    border: 1px solid darken($bgColor, 15%);
  }
  @if $type == 'solid' {
    border: 1px solid darken($bgColor, 15%);
  }
  @if $type == 'simple' {
    border: 1px solid transparent;
  }
  @if $type == 'clean' {
    border: 1px solid transparent;
  }
  @if $type == 'link' {
    border: 1px solid transparent;
  }
}

@mixin createHover($colorName) {
  $bgColor: map.get($color, $colorName);

  &:hover {
    background-color: darken($bgColor, 10%);
  }
}

@mixin buttonVariant($type, $colorName) {
  &.variant-#{$type} {
    @include createBackgroundColor($type);
    @include createBorderColor($type);
    @include createHover($colorName);

    @if $type == 'link' {
      &:hover {
        text-decoration: underline;
      }
    }
  }
}
